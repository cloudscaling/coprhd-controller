#!/bin/bash
#
# Copyright (c) 2012 EMC Corporation
# All Rights Reserved
#
# This software contains the intellectual property of EMC Corporation
# or is licensed to EMC Corporation from third parties.  Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of EMC.
#
# /etc/getovfproperties
#
# Search for a CD-ROM containing ovf-env.xml.
# Parse the ovf-env.xml and print the well-known properties using the key=value format.
# If ovfenv.properties already exists, read properties directly from /etc/ovfenv.properties
# Also, convert VMware Studio properties to the corresponding StorageOS properties.
#
# Usage: /etc/getovfproperties: default behavior. Read from cdrom into ovf props file if file doesn't exist, otherwise read directly from file.
#        /etc/getovfproperties  --readCDROM: force read from cdrom and overwrite ovf props file. 

# Source /etc/sysconfig/storageos
#
STORAGEOS_SYSCONFIG=${STORAGEOS_SYSCONFIG:-'/etc/sysconfig/storageos'}
test -r "${STORAGEOS_SYSCONFIG}"       || exit 6
. ${STORAGEOS_SYSCONFIG}

FINDFS="/sbin/findfs"
BLKID="/sbin/blkid"

# CD-ROM device and a default mount point
#
cdrom_dev='/dev/sr0'
ovfenv_dev=''
ovfenv_mnt='/.volumes/cdrom0'
controller_props_file='/.volumes/bootfs/etc/controller-ovf.properties'
ovf_props_file='/etc/ovfenv.properties'
ovf_defaults='/etc/.ovfenv.properties'
nl='
'
export PATH=/bin:/usr/bin:/sbin:/usr/sbin

_ismounted() {
    while read dev mnt dummy ; do [ "${1}" = "${dev}" -o "${1}" = "${mnt}" ] && return 0 ; done </proc/mounts ; return 1
}

_getmntpnt() {
    while read dev mnt dummy ; do [ "${1}" = "${dev}" ] && echo "${mnt}" && return 0 ; done </proc/mounts ; return 1
}

_umount() {
    if _ismounted ${1} ; then umount ${1} ; fi
}

_mount() {
    if ! _getmntpnt "${1}" ; then
        if [ ! -d "${2}" ] ; then  mkdir -p "${2}" || return $? ; fi
        mount -o ro "${1}" "${2}"
    fi
}

_probe() {
    local dev=${1} 
    udevadm settle # ; [ -e "${dev}" ] || return 1
    local retry
    for retry in 1 2 3 4 5 ; do
        local err
        err=$(dd if=${dev} of=/dev/zero count=1 2>&1) && return 0
        case "${err}" in 
            *'No medium found') return 1;;
            *'No such file or directory') return 1;;
            *)                  echo "${err}" >&2;;
        esac
        sleep 1
    done
}

# probe ovfenv device (disk partition or cdrom)
# Scenarios:
# 1. ovfenv partition located but empty
# 2. ovfenv partition located (either in native or hypervisor env).
# 3. ovfenv cdrom located
# 4. not found 
_probe_ovfenv() {
    ovfenv_dev=$(_probe_ovfenv_partition) || ovfenv_dev=$(_probe_ovfenv_cdrom) || return 1 # Can't find ovfenv device (partition or cdrom)
    echo "${ovfenv_dev}"
    return 0
}

# probe ovfenv partition
_probe_ovfenv_partition() {
    ovfenv_part=$(_probe_ovfenv_empty_partition) || ovfenv_part=$(_probe_native_ovfenv_partition) || ovfenv_part=$(_probe_hypervisor_ovfenv_part) || return 1 #Can't find ovfenv part
    echo "${ovfenv_part}"
    return 0
}

# probe empty ovfenv partition
_probe_ovfenv_empty_partition() {
    local ovfenv_dev=$(${FINDFS} UUID="3c426f75-726e-6520-2f6f-7666656e763e" 2>/dev/null);
    if [ ! -z ${ovfenv_dev} ]; then
        # Found unconfigured empty ovfenv partition
        echo ${ovfenv_dev}
        return 0
    fi
    return 1
}

# probe ovfenv partition in baremetal env
_probe_native_ovfenv_partition() {
    local bootfs_dev=$(${FINDFS} UUID=3c426f75-726e-6520-2f62-6f6f7466733e 2>/dev/null)

    # In baremetal env, the ovfenv partition should be at same disk as bootfs partition
    local baremetal_ovfenv_disk=$(echo ${bootfs_dev} | sed 's/1//g' | awk -F'/' '{printf $3}')
    baremetal_ovfenv_dev=$(${BLKID}| sed -n '/LABEL="CDROM"/p' | sed -n "/${baremetal_ovfenv_disk}/p" | awk -F':' '{printf $1}')
    if [ ! -z ${baremetal_ovfenv_dev} ]; then
        # Found configured ovfenv partition in baremetal env
        echo ${baremetal_ovfenv_dev}
        return 0
    fi
    return 1 # Can't find OVFENV partition
}

# probe ovfenv partition in hypervisor env
_probe_hypervisor_ovfenv_part() {
    # In hypervisor env, the ovfenv partition should be at /dev/sdd
    hypervisor_ovfenv_disk="sdd"
    hypervisor_ovfenv_dev=$(${BLKID}| sed -n '/LABEL="CDROM"/p' |sed -n "/${hypervisor_ovfenv_disk}/p" | awk -F':' '{printf $1}')
    if [ ! -z ${hypervisor_ovfenv_dev} ]; then
        # Found configured ovfenv partition ("/dev/sdd1") in hypervisor env
        echo ${hypervisor_ovfenv_dev}
        return 0
    fi
    return 1 # Can't find OVFENV partition
}

# probe ovfenv cdrom
_probe_ovfenv_cdrom() {
    _probe "${cdrom_dev}" || return 1 # No CD-ROM
    ovfenv_dev=${cdrom_dev}
    echo ${ovfenv_dev}
    return 0
}

_mount_ovfenv() {
    ovfenv_dev=$(_probe_ovfenv) || return 1 # Can't find OVFENV device (partition or cdrom)
    _mount "${ovfenv_dev}" "${ovfenv_mnt}" || return 2 # Can't mount OVFENV device

    echo "${ovfenv_mnt}"
}

# Parse ovf-env.xml for system properties
#
# Node_id is parsed from oe:id (vm name) first and added to hold space
#     if oe:id is empty do not store anything (standalone,devkit)
# If node_id "per VM" property is found then it replaces node_id in hold space
# When end of property section found node_id is printed from hold space and sed quits
_parse_ovfenv_xml() {
       sed -n '
       /<\/PropertySection/ {g; p; q}
       /oe:id=/ {
           s/.*oe:id="\([^"][^"]*\)".*/node_id=\1/
           /oe:id=/ d
           h
       }
       /<Property / {
           :P
           /\/>/ {
               /oe:key="node_id"/ {
                    s/.*oe:value="\([^"]*\)".*/node_id=\1/;h;d
               }
               s/.*oe:key="\([^"]*\)".*oe:value="\([^"]*\)".*/\1=\2/
               s/vami\.DNS\..*=/network_nameservers=/
               s/vami\.ip0.*=/network_standalone_ipaddr=/
               s/vami\.gateway\..*=/network_gateway=/
               s/vami\.netmask0\..*=/network_netmask=/

               # Recode newlines in values
               s/\n/\\n/g

               # Print only network and node keys
               # New files only contain network and node
               # Old xml file may contain keys for properties that need to be ignored post upgrade
               # Purposely ignore nameservers and ntpservers keys as they have moved to oonfig
               s/^\(network_nameservers\|network_ntpservers\)/ignore/
               # This is for devkit to have dns and ntp present in ovf props
               s/devkit_nameservers/network_nameservers/g
               s/devkit_ntpservers/network_ntpservers/g
               s/^\(network\|node\|devkit\).*/\0/p
               d
           }
           N; b P
       }'
}

_parse_ovfenv_properties() {
    sed -r '/^[ \t\r\n]*$/ { d; q }'
}

# Write the properties file with the write permissions
#
_props_write() {
   rm -f "${1}" && cp /dev/null "${1}" && chmod 400 "${1}" && echo "${2}" >>"${1}"
}

_get_ovf_property() {
   ( IFS="${nl}" ; for arg in ${2} ; do
          [ "${1}" = "${arg%%=*}" ] && arg="${arg#*=}" && arg="${arg//\\n/${nl}}" && echo "${arg}" && return 0
      done
      return 1  
   )
}

_get_node_ids() {
    if _get_ovf_property 'network_1_ipaddr' "${1}" &>/dev/null ; then
        seq --separator=' ' $(_get_ovf_property 'node_count' "${1}")
    else
        echo 'standalone'
    fi 
}

_get_expected_props() {
    while read line ; do
        if [[ "${line}" =~ .*"\${iter}".* ]] ; then
            for nodeid in $(_get_node_ids "${1}") ; do
                echo "${line/\$\{iter\}/${nodeid}}"
            done
        else 
            echo "${line}"
        fi
    done < "${2}"  
}

_ovfenv_properties() {
    local ovf_properties="${1}"
    local ovf_defaults_filename="${2}"
    #first output the properties that were found in the ovf envelope
    echo "${ovf_properties}"
    # next add any expected properties that were not present in the envelope
    # this is to address upgrade cases where the envelope may be missing 
    # some ovf properties added in new release
    local expected_props="$(_get_expected_props "${ovf_properties}" "${ovf_defaults_filename}")"
    ( IFS="${nl}" ; for expected_property in ${expected_props} ; do
        local expected_property_key="${expected_property%%=*}"
        _get_ovf_property ${expected_property_key} "${1}" &> /dev/null || echo "${expected_property}"
      done
    )
}

_get_props_xml() {
    local f="${1}.xml"
    [ -f "${f}" ]                               || return 3  # No such file
    [ -s "${f}" ]                               || return 4  # Empty file

    local ovfenv
    ovfenv=$(_parse_ovfenv_xml <"${f}")         || return 5  # Can't parse
    [ -n "${ovfenv}" ]                          || return 6  # Empty output
    echo "${ovfenv}"
}

_get_props_properties() {
    local f="${1}.properties"
    [ -f "${f}" ]                               || return 7  # No such file
    [ -s "${f}" ]                               || return 8  # Empty file

    local ovfenv
    ovfenv=$(_parse_ovfenv_properties <"${f}")  || return 9  # Can't parse
    [ -n "${ovfenv}" ]                          || return 10 # Empty output
    echo "${ovfenv}"
}

_get_props() {
    local ovfenv
    ovfenv=$(_get_props_xml "${1}" || _get_props_properties "${1}")  || return $?

    _ovfenv_properties "${ovfenv}" "${ovf_defaults}" | sort
}

# Always unmount on exit or error
#
trap "_umount ${ovfenv_mnt}" EXIT

# Try mount the virtual CD-ROM and parse ovf-env.xml
#
set -e

if [ "${1}" == "--probe-ovfenv-partition" ] ; then
    ovfenv_partition=$(_probe_ovfenv_partition) || exit 1 # Can't find ovfenv partition
    echo ${ovfenv_partition};
    exit 0;
fi

if [ "${1}" == "--probe-ovfenv-empty-partition" ] ; then
    ovfenv_empty_partition=$(_probe_ovfenv_empty_partition) || exit 1 # Can't find empty ovfenv partition
    echo ${ovfenv_empty_partition};
    exit 0;
fi

# Currently ViPR node deployed in vApp VMware env would always has cdrom,
# while in non-vApp and other hypervisor platform(e.g. Hyper-V, KVM etc.), there is no cdrom attached.
# We are using this to tell if currently we are in vApp env.  
# TODO: Need to revisit it in native env.
if [ "${1}" == "--is-vapp" ] ; then
    ovfenv_dev=$(_probe_ovfenv_cdrom) || exit 1 # Can't find ovfenv cdrom device
    exit 0;
fi

if [ "${1}" == "--readCDROM" ] || [ ! -s "${ovf_props_file}" ] ; then
    mntpnt=$(_mount_ovfenv)
    props=$(_get_props ${mntpnt}/ovf-env)
    _props_write "${ovf_props_file}" "${props}"
    chown storageos:storageos "${ovf_props_file}"
else
    props=$(<"${ovf_props_file}")
fi
echo "${props}" 
